{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The Aviation Distance Estimation and Route Planning Tool (ADERPT) provides two primary functions : ",
                " ",
                "1) Route optimization",
                " ",
                "2) Obstacle avoidance",
                "",
                "We will be dealing with the route optimization part of it in this assignment.",
                "",
                "The route optimization portion of the model seeks a least cost route from a starting location to an ending location",
                "by selecting refuel locations that minimize the total route distance or travel time while considering multiple constraints. "
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "All geographic coordinates used in the model are latitude / longitude coordinates expressed in Decimal Degrees (DD). ",
                "",
                "To account for the spherical curvature of the earth, we use great-circle distance calculations as outlined in Air Navigation : ",
                "",
                "d = 60 * inv(cos)[(sin lat1 * sin lat2) + (cos lat1 * cos lat2) * cos(lon1 - lon2)]",
                "",
                "where : ",
                "","d -> great-circle distance between 2 co-ordinates","","lat1 & lat2 -> departure and arrival latitude respectively ","","lon1 & lon2 -> departure and arrival longitude respectively "]},{"cell_type":"markdown","metadata":{},"source":["Input : ","","1) Source and destination nodes
","
","2) Maximum distance allowed before refueling
","
","3) Planned ground speed
","
","4) Ground time required for refuelling"]},{"cell_type":"markdown","metadata":{},"source":["Output: ","
","1) Refuel locations in sequential order
","
","2) Distance and flight time of each flight leg
","
","3) Total distance of the route
","
","4) Total flight time of the route "]},{"cell_type":"markdown","metadata":{},"source":["The route optimization – DMA algorithm begins by collecting the start and target nodes from the user input form. 
","
","The algorithm then uses the distance matrix to identify all feasible successor nodes i.e. 
","refuel locations that are closer than the user defined maximum distance before refueling and calculates f'(n) for each node.
","The model selects the node with the lowest f'(n) value and designates it as the current node. 
","
","The algorithm then iterates, identifying all feasible successor nodes and 
","terminates when the goal node is designated as the current node. 
","
","If the goal node has not been reached and the open list contains no nodes, the model produces an error message 
","indicating that an optimum solution could not be found."]},{"cell_type":"markdown","metadata":{},"source":["The route optimization – TMA Star algorithm model is structured the same way as the DMA-Star model, with two modifications.
","
","Firstly, f'(n), g'(n) and h'(n) are in units of time (in hours) instead of distance. 
","To accomplish this, the algorithm divides g'(n) and h'(n) by the estimated ground speed of the flight.
","
","The second deviation from the DMA Star model is that the user defined ground time required to refuel is incorporated.
","
","The resulting formula is : f'(n) = g'(n) + h'(n) + groundTime"]},{"cell_type":"markdown","metadata":{},"source":["Solve the above problem using A* Search, Greedy Search and Uniform Cost Search and compare the results."]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.5"}},"nbformat":4,"nbformat_minor":2}